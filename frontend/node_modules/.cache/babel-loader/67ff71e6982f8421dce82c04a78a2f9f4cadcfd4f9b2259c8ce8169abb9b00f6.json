{"ast":null,"code":"import { AggregationColor } from '../../color-picker/color';\nimport { isBright } from '../../color-picker/components/ColorPresets';\nimport { getLineHeight, mergeToken } from '../../theme/internal';\nexport const prepareToken = token => {\n  const {\n    paddingInline,\n    onlyIconSize,\n    paddingBlock\n  } = token;\n  const buttonToken = mergeToken(token, {\n    buttonPaddingHorizontal: paddingInline,\n    buttonPaddingVertical: paddingBlock,\n    buttonIconOnlyFontSize: onlyIconSize\n  });\n  return buttonToken;\n};\nexport const prepareComponentToken = token => {\n  var _a, _b, _c, _d, _e, _f;\n  const contentFontSize = (_a = token.contentFontSize) !== null && _a !== void 0 ? _a : token.fontSize;\n  const contentFontSizeSM = (_b = token.contentFontSizeSM) !== null && _b !== void 0 ? _b : token.fontSize;\n  const contentFontSizeLG = (_c = token.contentFontSizeLG) !== null && _c !== void 0 ? _c : token.fontSizeLG;\n  const contentLineHeight = (_d = token.contentLineHeight) !== null && _d !== void 0 ? _d : getLineHeight(contentFontSize);\n  const contentLineHeightSM = (_e = token.contentLineHeightSM) !== null && _e !== void 0 ? _e : getLineHeight(contentFontSizeSM);\n  const contentLineHeightLG = (_f = token.contentLineHeightLG) !== null && _f !== void 0 ? _f : getLineHeight(contentFontSizeLG);\n  const solidTextColor = isBright(new AggregationColor(token.colorBgSolid), '#fff') ? '#000' : '#fff';\n  return {\n    fontWeight: 400,\n    defaultShadow: `0 ${token.controlOutlineWidth}px 0 ${token.controlTmpOutline}`,\n    primaryShadow: `0 ${token.controlOutlineWidth}px 0 ${token.controlOutline}`,\n    dangerShadow: `0 ${token.controlOutlineWidth}px 0 ${token.colorErrorOutline}`,\n    primaryColor: token.colorTextLightSolid,\n    dangerColor: token.colorTextLightSolid,\n    borderColorDisabled: token.colorBorder,\n    defaultGhostColor: token.colorBgContainer,\n    ghostBg: 'transparent',\n    defaultGhostBorderColor: token.colorBgContainer,\n    paddingInline: token.paddingContentHorizontal - token.lineWidth,\n    paddingInlineLG: token.paddingContentHorizontal - token.lineWidth,\n    paddingInlineSM: 8 - token.lineWidth,\n    onlyIconSize: token.fontSizeLG,\n    onlyIconSizeSM: token.fontSizeLG - 2,\n    onlyIconSizeLG: token.fontSizeLG + 2,\n    groupBorderColor: token.colorPrimaryHover,\n    linkHoverBg: 'transparent',\n    textTextColor: token.colorText,\n    textTextHoverColor: token.colorText,\n    textTextActiveColor: token.colorText,\n    textHoverBg: token.colorBgTextHover,\n    defaultColor: token.colorText,\n    defaultBg: token.colorBgContainer,\n    defaultBorderColor: token.colorBorder,\n    defaultBorderColorDisabled: token.colorBorder,\n    defaultHoverBg: token.colorBgContainer,\n    defaultHoverColor: token.colorPrimaryHover,\n    defaultHoverBorderColor: token.colorPrimaryHover,\n    defaultActiveBg: token.colorBgContainer,\n    defaultActiveColor: token.colorPrimaryActive,\n    defaultActiveBorderColor: token.colorPrimaryActive,\n    solidTextColor,\n    contentFontSize,\n    contentFontSizeSM,\n    contentFontSizeLG,\n    contentLineHeight,\n    contentLineHeightSM,\n    contentLineHeightLG,\n    paddingBlock: Math.max((token.controlHeight - contentFontSize * contentLineHeight) / 2 - token.lineWidth, 0),\n    paddingBlockSM: Math.max((token.controlHeightSM - contentFontSizeSM * contentLineHeightSM) / 2 - token.lineWidth, 0),\n    paddingBlockLG: Math.max((token.controlHeightLG - contentFontSizeLG * contentLineHeightLG) / 2 - token.lineWidth, 0)\n  };\n};","map":{"version":3,"names":["AggregationColor","isBright","getLineHeight","mergeToken","prepareToken","token","paddingInline","onlyIconSize","paddingBlock","buttonToken","buttonPaddingHorizontal","buttonPaddingVertical","buttonIconOnlyFontSize","prepareComponentToken","_a","_b","_c","_d","_e","_f","contentFontSize","fontSize","contentFontSizeSM","contentFontSizeLG","fontSizeLG","contentLineHeight","contentLineHeightSM","contentLineHeightLG","solidTextColor","colorBgSolid","fontWeight","defaultShadow","controlOutlineWidth","controlTmpOutline","primaryShadow","controlOutline","dangerShadow","colorErrorOutline","primaryColor","colorTextLightSolid","dangerColor","borderColorDisabled","colorBorder","defaultGhostColor","colorBgContainer","ghostBg","defaultGhostBorderColor","paddingContentHorizontal","lineWidth","paddingInlineLG","paddingInlineSM","onlyIconSizeSM","onlyIconSizeLG","groupBorderColor","colorPrimaryHover","linkHoverBg","textTextColor","colorText","textTextHoverColor","textTextActiveColor","textHoverBg","colorBgTextHover","defaultColor","defaultBg","defaultBorderColor","defaultBorderColorDisabled","defaultHoverBg","defaultHoverColor","defaultHoverBorderColor","defaultActiveBg","defaultActiveColor","colorPrimaryActive","defaultActiveBorderColor","Math","max","controlHeight","paddingBlockSM","controlHeightSM","paddingBlockLG","controlHeightLG"],"sources":["/Users/abhib/Documents/LlamaHackathon2024/timeline_of_me_frontend/node_modules/antd/es/button/style/token.js"],"sourcesContent":["import { AggregationColor } from '../../color-picker/color';\nimport { isBright } from '../../color-picker/components/ColorPresets';\nimport { getLineHeight, mergeToken } from '../../theme/internal';\nexport const prepareToken = token => {\n  const {\n    paddingInline,\n    onlyIconSize,\n    paddingBlock\n  } = token;\n  const buttonToken = mergeToken(token, {\n    buttonPaddingHorizontal: paddingInline,\n    buttonPaddingVertical: paddingBlock,\n    buttonIconOnlyFontSize: onlyIconSize\n  });\n  return buttonToken;\n};\nexport const prepareComponentToken = token => {\n  var _a, _b, _c, _d, _e, _f;\n  const contentFontSize = (_a = token.contentFontSize) !== null && _a !== void 0 ? _a : token.fontSize;\n  const contentFontSizeSM = (_b = token.contentFontSizeSM) !== null && _b !== void 0 ? _b : token.fontSize;\n  const contentFontSizeLG = (_c = token.contentFontSizeLG) !== null && _c !== void 0 ? _c : token.fontSizeLG;\n  const contentLineHeight = (_d = token.contentLineHeight) !== null && _d !== void 0 ? _d : getLineHeight(contentFontSize);\n  const contentLineHeightSM = (_e = token.contentLineHeightSM) !== null && _e !== void 0 ? _e : getLineHeight(contentFontSizeSM);\n  const contentLineHeightLG = (_f = token.contentLineHeightLG) !== null && _f !== void 0 ? _f : getLineHeight(contentFontSizeLG);\n  const solidTextColor = isBright(new AggregationColor(token.colorBgSolid), '#fff') ? '#000' : '#fff';\n  return {\n    fontWeight: 400,\n    defaultShadow: `0 ${token.controlOutlineWidth}px 0 ${token.controlTmpOutline}`,\n    primaryShadow: `0 ${token.controlOutlineWidth}px 0 ${token.controlOutline}`,\n    dangerShadow: `0 ${token.controlOutlineWidth}px 0 ${token.colorErrorOutline}`,\n    primaryColor: token.colorTextLightSolid,\n    dangerColor: token.colorTextLightSolid,\n    borderColorDisabled: token.colorBorder,\n    defaultGhostColor: token.colorBgContainer,\n    ghostBg: 'transparent',\n    defaultGhostBorderColor: token.colorBgContainer,\n    paddingInline: token.paddingContentHorizontal - token.lineWidth,\n    paddingInlineLG: token.paddingContentHorizontal - token.lineWidth,\n    paddingInlineSM: 8 - token.lineWidth,\n    onlyIconSize: token.fontSizeLG,\n    onlyIconSizeSM: token.fontSizeLG - 2,\n    onlyIconSizeLG: token.fontSizeLG + 2,\n    groupBorderColor: token.colorPrimaryHover,\n    linkHoverBg: 'transparent',\n    textTextColor: token.colorText,\n    textTextHoverColor: token.colorText,\n    textTextActiveColor: token.colorText,\n    textHoverBg: token.colorBgTextHover,\n    defaultColor: token.colorText,\n    defaultBg: token.colorBgContainer,\n    defaultBorderColor: token.colorBorder,\n    defaultBorderColorDisabled: token.colorBorder,\n    defaultHoverBg: token.colorBgContainer,\n    defaultHoverColor: token.colorPrimaryHover,\n    defaultHoverBorderColor: token.colorPrimaryHover,\n    defaultActiveBg: token.colorBgContainer,\n    defaultActiveColor: token.colorPrimaryActive,\n    defaultActiveBorderColor: token.colorPrimaryActive,\n    solidTextColor,\n    contentFontSize,\n    contentFontSizeSM,\n    contentFontSizeLG,\n    contentLineHeight,\n    contentLineHeightSM,\n    contentLineHeightLG,\n    paddingBlock: Math.max((token.controlHeight - contentFontSize * contentLineHeight) / 2 - token.lineWidth, 0),\n    paddingBlockSM: Math.max((token.controlHeightSM - contentFontSizeSM * contentLineHeightSM) / 2 - token.lineWidth, 0),\n    paddingBlockLG: Math.max((token.controlHeightLG - contentFontSizeLG * contentLineHeightLG) / 2 - token.lineWidth, 0)\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}