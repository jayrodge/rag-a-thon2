{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/g, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';\nexport let AggregationColor = /*#__PURE__*/function () {\n  function AggregationColor(color) {\n    _classCallCheck(this, AggregationColor);\n    var _a;\n    this.cleared = false;\n    // Clone from another AggregationColor\n    if (color instanceof AggregationColor) {\n      this.metaColor = color.metaColor.clone();\n      this.colors = (_a = color.colors) === null || _a === void 0 ? void 0 : _a.map(info => ({\n        color: new AggregationColor(info.color),\n        percent: info.percent\n      }));\n      this.cleared = color.cleared;\n      return;\n    }\n    const isArray = Array.isArray(color);\n    if (isArray && color.length) {\n      this.colors = color.map(_ref => {\n        let {\n          color: c,\n          percent\n        } = _ref;\n        return {\n          color: new AggregationColor(c),\n          percent\n        };\n      });\n      this.metaColor = new RcColor(this.colors[0].color.metaColor);\n    } else {\n      this.metaColor = new RcColor(isArray ? '' : color);\n    }\n    if (!color || isArray && !this.colors) {\n      this.metaColor = this.metaColor.setA(0);\n      this.cleared = true;\n    }\n  }\n  return _createClass(AggregationColor, [{\n    key: \"toHsb\",\n    value: function toHsb() {\n      return this.metaColor.toHsb();\n    }\n  }, {\n    key: \"toHsbString\",\n    value: function toHsbString() {\n      return this.metaColor.toHsbString();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return getHex(this.toHexString(), this.metaColor.a < 1);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this.metaColor.toHexString();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return this.metaColor.toRgb();\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"isGradient\",\n    value: function isGradient() {\n      return !!this.colors && !this.cleared;\n    }\n  }, {\n    key: \"getColors\",\n    value: function getColors() {\n      return this.colors || [{\n        color: this,\n        percent: 0\n      }];\n    }\n  }, {\n    key: \"toCssString\",\n    value: function toCssString() {\n      const {\n        colors\n      } = this;\n      // CSS line-gradient\n      if (colors) {\n        const colorsStr = colors.map(c => `${c.color.toRgbString()} ${c.percent}%`).join(', ');\n        return `linear-gradient(90deg, ${colorsStr})`;\n      }\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(color) {\n      if (!color || this.isGradient() !== color.isGradient()) {\n        return false;\n      }\n      if (!this.isGradient()) {\n        return this.toHexString() === color.toHexString();\n      }\n      return this.colors.length === color.colors.length && this.colors.every((c, i) => {\n        const target = color.colors[i];\n        return c.percent === target.percent && c.color.equals(target.color);\n      });\n    }\n  }]);\n}();","map":{"version":3,"names":["_classCallCheck","_createClass","Color","RcColor","toHexFormat","value","alpha","replace","slice","getHex","AggregationColor","color","_a","cleared","metaColor","clone","colors","map","info","percent","isArray","Array","length","_ref","c","setA","key","toHsb","toHsbString","toHex","toHexString","a","toRgb","toRgbString","isGradient","getColors","toCssString","colorsStr","join","equals","every","i","target"],"sources":["/Users/abhib/Documents/LlamaHackathon2024/timeline_of_me_frontend/node_modules/antd/es/color-picker/color.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/g, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';\nexport let AggregationColor = /*#__PURE__*/function () {\n  function AggregationColor(color) {\n    _classCallCheck(this, AggregationColor);\n    var _a;\n    this.cleared = false;\n    // Clone from another AggregationColor\n    if (color instanceof AggregationColor) {\n      this.metaColor = color.metaColor.clone();\n      this.colors = (_a = color.colors) === null || _a === void 0 ? void 0 : _a.map(info => ({\n        color: new AggregationColor(info.color),\n        percent: info.percent\n      }));\n      this.cleared = color.cleared;\n      return;\n    }\n    const isArray = Array.isArray(color);\n    if (isArray && color.length) {\n      this.colors = color.map(_ref => {\n        let {\n          color: c,\n          percent\n        } = _ref;\n        return {\n          color: new AggregationColor(c),\n          percent\n        };\n      });\n      this.metaColor = new RcColor(this.colors[0].color.metaColor);\n    } else {\n      this.metaColor = new RcColor(isArray ? '' : color);\n    }\n    if (!color || isArray && !this.colors) {\n      this.metaColor = this.metaColor.setA(0);\n      this.cleared = true;\n    }\n  }\n  return _createClass(AggregationColor, [{\n    key: \"toHsb\",\n    value: function toHsb() {\n      return this.metaColor.toHsb();\n    }\n  }, {\n    key: \"toHsbString\",\n    value: function toHsbString() {\n      return this.metaColor.toHsbString();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return getHex(this.toHexString(), this.metaColor.a < 1);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this.metaColor.toHexString();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return this.metaColor.toRgb();\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"isGradient\",\n    value: function isGradient() {\n      return !!this.colors && !this.cleared;\n    }\n  }, {\n    key: \"getColors\",\n    value: function getColors() {\n      return this.colors || [{\n        color: this,\n        percent: 0\n      }];\n    }\n  }, {\n    key: \"toCssString\",\n    value: function toCssString() {\n      const {\n        colors\n      } = this;\n      // CSS line-gradient\n      if (colors) {\n        const colorsStr = colors.map(c => `${c.color.toRgbString()} ${c.percent}%`).join(', ');\n        return `linear-gradient(90deg, ${colorsStr})`;\n      }\n      return this.metaColor.toRgbString();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(color) {\n      if (!color || this.isGradient() !== color.isGradient()) {\n        return false;\n      }\n      if (!this.isGradient()) {\n        return this.toHexString() === color.toHexString();\n      }\n      return this.colors.length === color.colors.length && this.colors.every((c, i) => {\n        const target = color.colors[i];\n        return c.percent === target.percent && c.color.equals(target.color);\n      });\n    }\n  }]);\n}();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}