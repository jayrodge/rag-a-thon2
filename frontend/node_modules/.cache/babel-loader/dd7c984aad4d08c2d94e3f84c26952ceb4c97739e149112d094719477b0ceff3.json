{"ast":null,"code":"import * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport { getDOM } from \"rc-util/es/Dom/findDOMNode\";\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\nfunction toNamePathStr(name) {\n  const namePath = toArray(name);\n  return namePath.join('_');\n}\nfunction getFieldDOMNode(name, wrapForm) {\n  const field = wrapForm.getFieldInstance(name);\n  const fieldDom = getDOM(field);\n  if (fieldDom) {\n    return fieldDom;\n  }\n  const fieldId = getFieldId(toArray(name), wrapForm.__INTERNAL__.name);\n  if (fieldId) {\n    return document.getElementById(fieldId);\n  }\n}\nexport default function useForm(form) {\n  const [rcForm] = useRcForm();\n  const itemsRef = React.useRef({});\n  const wrapForm = React.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n    __INTERNAL__: {\n      itemRef: name => node => {\n        const namePathStr = toNamePathStr(name);\n        if (node) {\n          itemsRef.current[namePathStr] = node;\n        } else {\n          delete itemsRef.current[namePathStr];\n        }\n      }\n    },\n    scrollToField: function (name) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const node = getFieldDOMNode(name, wrapForm);\n      if (node) {\n        scrollIntoView(node, Object.assign({\n          scrollMode: 'if-needed',\n          block: 'nearest'\n        }, options));\n      }\n    },\n    getFieldInstance: name => {\n      const namePathStr = toNamePathStr(name);\n      return itemsRef.current[namePathStr];\n    }\n  }), [form, rcForm]);\n  return [wrapForm];\n}","map":{"version":3,"names":["React","useForm","useRcForm","getDOM","scrollIntoView","getFieldId","toArray","toNamePathStr","name","namePath","join","getFieldDOMNode","wrapForm","field","getFieldInstance","fieldDom","fieldId","__INTERNAL__","document","getElementById","form","rcForm","itemsRef","useRef","useMemo","Object","assign","itemRef","node","namePathStr","current","scrollToField","options","arguments","length","undefined","scrollMode","block"],"sources":["/Users/abhib/Documents/LlamaHackathon2024/timeline_of_me_frontend/node_modules/antd/es/form/hooks/useForm.js"],"sourcesContent":["import * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport { getDOM } from \"rc-util/es/Dom/findDOMNode\";\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { getFieldId, toArray } from '../util';\nfunction toNamePathStr(name) {\n  const namePath = toArray(name);\n  return namePath.join('_');\n}\nfunction getFieldDOMNode(name, wrapForm) {\n  const field = wrapForm.getFieldInstance(name);\n  const fieldDom = getDOM(field);\n  if (fieldDom) {\n    return fieldDom;\n  }\n  const fieldId = getFieldId(toArray(name), wrapForm.__INTERNAL__.name);\n  if (fieldId) {\n    return document.getElementById(fieldId);\n  }\n}\nexport default function useForm(form) {\n  const [rcForm] = useRcForm();\n  const itemsRef = React.useRef({});\n  const wrapForm = React.useMemo(() => form !== null && form !== void 0 ? form : Object.assign(Object.assign({}, rcForm), {\n    __INTERNAL__: {\n      itemRef: name => node => {\n        const namePathStr = toNamePathStr(name);\n        if (node) {\n          itemsRef.current[namePathStr] = node;\n        } else {\n          delete itemsRef.current[namePathStr];\n        }\n      }\n    },\n    scrollToField: function (name) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const node = getFieldDOMNode(name, wrapForm);\n      if (node) {\n        scrollIntoView(node, Object.assign({\n          scrollMode: 'if-needed',\n          block: 'nearest'\n        }, options));\n      }\n    },\n    getFieldInstance: name => {\n      const namePathStr = toNamePathStr(name);\n      return itemsRef.current[namePathStr];\n    }\n  }), [form, rcForm]);\n  return [wrapForm];\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,IAAIC,SAAS,QAAQ,eAAe;AACpD,SAASC,MAAM,QAAQ,4BAA4B;AACnD,OAAOC,cAAc,MAAM,4BAA4B;AACvD,SAASC,UAAU,EAAEC,OAAO,QAAQ,SAAS;AAC7C,SAASC,aAAaA,CAACC,IAAI,EAAE;EAC3B,MAAMC,QAAQ,GAAGH,OAAO,CAACE,IAAI,CAAC;EAC9B,OAAOC,QAAQ,CAACC,IAAI,CAAC,GAAG,CAAC;AAC3B;AACA,SAASC,eAAeA,CAACH,IAAI,EAAEI,QAAQ,EAAE;EACvC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,gBAAgB,CAACN,IAAI,CAAC;EAC7C,MAAMO,QAAQ,GAAGZ,MAAM,CAACU,KAAK,CAAC;EAC9B,IAAIE,QAAQ,EAAE;IACZ,OAAOA,QAAQ;EACjB;EACA,MAAMC,OAAO,GAAGX,UAAU,CAACC,OAAO,CAACE,IAAI,CAAC,EAAEI,QAAQ,CAACK,YAAY,CAACT,IAAI,CAAC;EACrE,IAAIQ,OAAO,EAAE;IACX,OAAOE,QAAQ,CAACC,cAAc,CAACH,OAAO,CAAC;EACzC;AACF;AACA,eAAe,SAASf,OAAOA,CAACmB,IAAI,EAAE;EACpC,MAAM,CAACC,MAAM,CAAC,GAAGnB,SAAS,CAAC,CAAC;EAC5B,MAAMoB,QAAQ,GAAGtB,KAAK,CAACuB,MAAM,CAAC,CAAC,CAAC,CAAC;EACjC,MAAMX,QAAQ,GAAGZ,KAAK,CAACwB,OAAO,CAAC,MAAMJ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAGK,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,MAAM,CAAC,EAAE;IACtHJ,YAAY,EAAE;MACZU,OAAO,EAAEnB,IAAI,IAAIoB,IAAI,IAAI;QACvB,MAAMC,WAAW,GAAGtB,aAAa,CAACC,IAAI,CAAC;QACvC,IAAIoB,IAAI,EAAE;UACRN,QAAQ,CAACQ,OAAO,CAACD,WAAW,CAAC,GAAGD,IAAI;QACtC,CAAC,MAAM;UACL,OAAON,QAAQ,CAACQ,OAAO,CAACD,WAAW,CAAC;QACtC;MACF;IACF,CAAC;IACDE,aAAa,EAAE,SAAAA,CAAUvB,IAAI,EAAE;MAC7B,IAAIwB,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACpF,MAAML,IAAI,GAAGjB,eAAe,CAACH,IAAI,EAAEI,QAAQ,CAAC;MAC5C,IAAIgB,IAAI,EAAE;QACRxB,cAAc,CAACwB,IAAI,EAAEH,MAAM,CAACC,MAAM,CAAC;UACjCU,UAAU,EAAE,WAAW;UACvBC,KAAK,EAAE;QACT,CAAC,EAAEL,OAAO,CAAC,CAAC;MACd;IACF,CAAC;IACDlB,gBAAgB,EAAEN,IAAI,IAAI;MACxB,MAAMqB,WAAW,GAAGtB,aAAa,CAACC,IAAI,CAAC;MACvC,OAAOc,QAAQ,CAACQ,OAAO,CAACD,WAAW,CAAC;IACtC;EACF,CAAC,CAAC,EAAE,CAACT,IAAI,EAAEC,MAAM,CAAC,CAAC;EACnB,OAAO,CAACT,QAAQ,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}