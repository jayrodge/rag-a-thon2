{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genTreeStyle, initComponentToken } from '../../tree/style';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = `.${treePrefixCls}`;\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [`${componentCls}-dropdown`]: [{\n      padding: `${unit(token.paddingXS)} ${unit(token.calc(token.paddingXS).div(2).equal())}`\n    },\n    // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          [`${treeCls}-treenode`]: {\n            [`${treeCls}-node-content-wrapper`]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    },\n    // ==================== Checkbox ====================\n    getCheckboxStyle(`${treePrefixCls}-checkbox`, token),\n    // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [`${treeCls}-switcher${treeCls}-switcher_close`]: {\n          [`${treeCls}-switcher-icon svg`]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\nexport const prepareComponentToken = initComponentToken;\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls, rootCls) {\n  return genStyleHooks('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  }, initComponentToken)(prefixCls, rootCls);\n}","map":{"version":3,"names":["unit","getStyle","getCheckboxStyle","genStyleHooks","mergeToken","genTreeStyle","initComponentToken","genBaseStyle","token","componentCls","treePrefixCls","colorBgElevated","treeCls","padding","paddingXS","calc","div","equal","colorBgContainer","borderRadius","alignItems","flex","direction","transform","prepareComponentToken","useTreeSelectStyle","prefixCls","rootCls","treeSelectToken"],"sources":["/Users/abhib/Documents/LlamaHackathon2024/timeline_of_me_frontend/node_modules/antd/es/tree-select/style/index.js"],"sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genTreeStyle, initComponentToken } from '../../tree/style';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = `.${treePrefixCls}`;\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [`${componentCls}-dropdown`]: [{\n      padding: `${unit(token.paddingXS)} ${unit(token.calc(token.paddingXS).div(2).equal())}`\n    },\n    // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          [`${treeCls}-treenode`]: {\n            [`${treeCls}-node-content-wrapper`]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    },\n    // ==================== Checkbox ====================\n    getCheckboxStyle(`${treePrefixCls}-checkbox`, token),\n    // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [`${treeCls}-switcher${treeCls}-switcher_close`]: {\n          [`${treeCls}-switcher-icon svg`]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\nexport const prepareComponentToken = initComponentToken;\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls, rootCls) {\n  return genStyleHooks('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  }, initComponentToken)(prefixCls, rootCls);\n}"],"mappings":"AAAA,SAASA,IAAI,QAAQ,qBAAqB;AAC1C,SAASC,QAAQ,IAAIC,gBAAgB,QAAQ,sBAAsB;AACnE,SAASC,aAAa,EAAEC,UAAU,QAAQ,sBAAsB;AAChE,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,kBAAkB;AACnE;AACA,MAAMC,YAAY,GAAGC,KAAK,IAAI;EAC5B,MAAM;IACJC,YAAY;IACZC,aAAa;IACbC;EACF,CAAC,GAAGH,KAAK;EACT,MAAMI,OAAO,GAAG,IAAIF,aAAa,EAAE;EACnC,OAAO;EACP;EACA;EACA;EACA;IACE,CAAC,GAAGD,YAAY,WAAW,GAAG,CAAC;MAC7BI,OAAO,EAAE,GAAGb,IAAI,CAACQ,KAAK,CAACM,SAAS,CAAC,IAAId,IAAI,CAACQ,KAAK,CAACO,IAAI,CAACP,KAAK,CAACM,SAAS,CAAC,CAACE,GAAG,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IACvF,CAAC;IACD;IACAZ,YAAY,CAACK,aAAa,EAAEN,UAAU,CAACI,KAAK,EAAE;MAC5CU,gBAAgB,EAAEP;IACpB,CAAC,CAAC,CAAC,EAAE;MACH,CAACC,OAAO,GAAG;QACTO,YAAY,EAAE,CAAC;QACf,CAAC,GAAGP,OAAO,oBAAoB,GAAG;UAChCQ,UAAU,EAAE,SAAS;UACrB,CAAC,GAAGR,OAAO,WAAW,GAAG;YACvB,CAAC,GAAGA,OAAO,uBAAuB,GAAG;cACnCS,IAAI,EAAE;YACR;UACF;QACF;MACF;IACF,CAAC;IACD;IACAnB,gBAAgB,CAAC,GAAGQ,aAAa,WAAW,EAAEF,KAAK,CAAC;IACpD;IACA;MACE,OAAO,EAAE;QACPc,SAAS,EAAE,KAAK;QAChB,CAAC,GAAGV,OAAO,YAAYA,OAAO,iBAAiB,GAAG;UAChD,CAAC,GAAGA,OAAO,oBAAoB,GAAG;YAChCW,SAAS,EAAE;UACb;QACF;MACF;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMC,qBAAqB,GAAGlB,kBAAkB;AACvD;AACA,eAAe,SAASmB,kBAAkBA,CAACC,SAAS,EAAEhB,aAAa,EAAEiB,OAAO,EAAE;EAC5E,OAAOxB,aAAa,CAAC,YAAY,EAAEK,KAAK,IAAI;IAC1C,MAAMoB,eAAe,GAAGxB,UAAU,CAACI,KAAK,EAAE;MACxCE;IACF,CAAC,CAAC;IACF,OAAO,CAACH,YAAY,CAACqB,eAAe,CAAC,CAAC;EACxC,CAAC,EAAEtB,kBAAkB,CAAC,CAACoB,SAAS,EAAEC,OAAO,CAAC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}