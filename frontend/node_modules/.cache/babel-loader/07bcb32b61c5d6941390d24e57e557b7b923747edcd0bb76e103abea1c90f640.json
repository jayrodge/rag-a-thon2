{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size = originWidth,\n    steps\n  } = props;\n  const [width, height] = getSize(size, 'circle');\n  let {\n    strokeWidth\n  } = props;\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  const percentArray = getPercentage(props);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    steps: steps,\n    percent: steps ? percentArray[1] : percentArray,\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: steps ? strokeColor[1] : strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  const smallCircle = width <= 20;\n  const node = /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, circleContent, !smallCircle && children);\n  if (smallCircle) {\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      title: children\n    }, node);\n  }\n  return node;\n};\nexport default Circle;","map":{"version":3,"names":["React","classNames","Circle","RCCircle","Tooltip","getPercentage","getSize","getStrokeColor","CIRCLE_MIN_STROKE_WIDTH","getMinPercent","width","props","prefixCls","trailColor","strokeLinecap","gapPosition","gapDegree","originWidth","type","children","success","size","steps","height","strokeWidth","undefined","Math","max","circleStyle","fontSize","realGapDegree","useMemo","percentArray","gapPos","isGradient","Object","prototype","toString","call","strokeColor","wrapperClassName","circleContent","createElement","percent","trailWidth","smallCircle","node","className","style","title"],"sources":["/Users/abhib/Documents/LlamaHackathon2024/timeline_of_me_frontend/node_modules/antd/es/progress/Circle.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size = originWidth,\n    steps\n  } = props;\n  const [width, height] = getSize(size, 'circle');\n  let {\n    strokeWidth\n  } = props;\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  const percentArray = getPercentage(props);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    steps: steps,\n    percent: steps ? percentArray[1] : percentArray,\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: steps ? strokeColor[1] : strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  const smallCircle = width <= 20;\n  const node = /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, circleContent, !smallCircle && children);\n  if (smallCircle) {\n    return /*#__PURE__*/React.createElement(Tooltip, {\n      title: children\n    }, node);\n  }\n  return node;\n};\nexport default Circle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}